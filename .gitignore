import pandas as pd
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')
from matplotlib import pyplot as plt
from matplotlib.ticker import MaxNLocator
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error,r2_score,accuracy_score



''' EXPLORATORY DATA ANALYSIS'''
df=pd.read_csv(r"GlobalLandTemperaturesByCountry.csv")
finding_null=df.isna().sum()
# print(finding_null)
# print(df.info())
df.dropna(axis = 'index', how = 'any', subset = ['AverageTemperature'], inplace = True)
# print(df['Country'].nunique())
# print(df['Country'].unique())

"''DATA PREPROCESSING"

'''remove duplicates'''
duplicates={'Denmark (Europe)':'Denmark',
    'Congo (Democratic Republic Of The)':'Congo',
    'France (Europe)':'France',
    'Netherlands (Europe)':'Netherlands',
    'United Kingdom (Europe)':'United Kingdom'
}
remove_dupe=df['Country'].replace(duplicates,inplace=True)


"''check if duplicates are replaced"
# print(df['Country'].unique())
# print(df.describe())



'''mean temperature is found to be 17.19 from above code,now group the data'''
avg_temp_country=df.groupby(['Country'])['AverageTemperature'].mean().to_frame().reset_index()
# print(avg_temp_country.head())



'''create new column for year'''
df["Year"] = df["date"].apply(lambda x : x.split("-")[0])
# print(df.head())
avg_temp_year=df.groupby(['Year'])['AverageTemperature'].mean().to_frame().reset_index()
print(avg_temp_year.head())


'''there are null datas in various year before 1850 so,on approximation taking datas above 1850'''
avg_temp_year["Year"] = avg_temp_year["Year"].apply(lambda x : int(x))
avg_temp_year = avg_temp_year[avg_temp_year["Year"] >= 1850]
# print(avg_temp_year.head())
avg_temp=avg_temp_year.groupby(['Year'])['AverageTemperature'].mean().to_frame().reset_index()
print(avg_temp.head())

'''DATA VISUALISATION'''
# it needs internet connection
fig=px.choropleth(avg_temp_country, locations='Country', locationmode='country names', color='AverageTemperature')
fig.update_layout(title='Choropleth Map of Average Temperature')
fig.show()

""'to check for the country wise temperature'
# plt.plot(df['Country'], df['AverageTemperature'], data=avg_temp_country, color='blue')
# plt.xlabel("country")
# plt.ylabel("Average Temperature")
# plt.title("Average Temperature for various regions of the world 1793-2012 ")
# plt.show()

'''to check the average temperature map for the seasonality/ stationarity of the data'''
ax = plt.figure(figsize=(10,8)).gca()
ax.xaxis.set_major_locator(MaxNLocator(integer=True))
plt.plot('Year', 'AverageTemperature', data=avg_temp, color='blue')
plt.title("World temperatures")
plt.xlabel("Year")
plt.ylabel("Temperature")
plt.legend()
plt.show()

'''target data'''
'''MODELLING FOR THE COUNTRY INDIA,CONSIDERING YEAR > 1850'''
india_df = df[df["Country"]== "India"].reset_index(drop=True)
india_df["Year"] = india_df["Year"].apply(lambda x : int(x))
india_df = india_df[india_df["Year"] >= 1850]
india_df=india_df.drop('date',axis=1)
india_df=india_df.drop('AverageTemperatureUncertainty',axis=1)
india_df=india_df.drop("Country",axis=1)
print(india_df)
avg_temp_india=india_df.groupby(['Year'])['AverageTemperature'].mean().to_frame().reset_index()
avg_temp_india['Year'] = pd.to_datetime(avg_temp_india['Year'])
print(avg_temp_india.head())

"""DATA MODELLING"""
"""TRAINING AND TESTING THE MODEL"""
from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     avg_temp_indiatest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",avg_temp_indiatest[0])
     print("2. P-Value : ", avg_temp_indiatest[1])
     print("3. Num Of Lags : ", avg_temp_indiatest[2])
     print("4. Num Of Observations Used For ADF Regression:", avg_temp_indiatest[3])
     print("5. Critical Values :")
     for key, val in avg_temp_indiatest[4].items():
         print("\t",key, ": ", val)
print(ad_test(avg_temp_india['AverageTemperature']))
 # p< 0.05 ; Data is stationary
# if p>0.05; Data is not stationary
# so here data is stationary
train=avg_temp_india.iloc[:-30]
test=avg_temp_india.iloc[-30:]
# print(train.shape,test.shape)
model=ARIMA(train['AverageTemperature'],order=(1,0,5))
model=model.fit()
# model=model.summary()
print(model)
start=len(train)
end=len(train)+len(test)-1
prediction=model.predict(start=start,end=end,typ='levels').rename('ARIMA Predictions')
prediction=prediction.plot(legend=True)
prediction=test['AverageTemperature'].plot(legend=True)
print(prediction)
# model_fit.plot_predict(dynamic=False)
plt.show()
